# -*- coding: utf-8 -*-
"""Minor project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YlsIgUAOBE93EgdpHznZtb82VyxO4IsA
"""

import pandas as pd
data = "https://raw.githubusercontent.com/arora123/Data/master/Automobile_data.csv"
df = pd.read_csv(data)

# Check for missing values
missing_values = df.isnull().sum()
print(missing_values)

# Drop rows with missing values
df = df.dropna()

# Convert price to numeric, forcing errors to NaN
df['price'] = pd.to_numeric(df['price'], errors='coerce')

# Drop rows with NaN price values
df = df.dropna(subset=['price'])

# Find the minimum and maximum price cars
min_price_car = df[df['price'] == df['price'].min()]
max_price_car = df[df['price'] == df['price'].max()]

print("Car with minimum price:")
print(min_price_car)

print("Car with maximum price:")
print(max_price_car)

# Count cars by body style
body_style_counts = df['body-style'].value_counts()
print("Number of cars with different body styles:\n", body_style_counts)

# Average price by body style
avg_price_body_style = df.groupby('body-style')['price'].mean().sort_values(ascending=False)
print("Average price by body style:\n", avg_price_body_style)

# Assuming the column for the car manufacturer is 'make' or similar
manufacturer_column = 'make'  # Replace 'make' with the actual column name if different

# Check if 'make' column exists
if manufacturer_column in df.columns:
    # Average price by company
    avg_price_company = df.groupby(manufacturer_column)['price'].mean().sort_values(ascending=False)
    print("Average price by company:\n", avg_price_company)
else:
    print(f"Column '{manufacturer_column}' not found in the dataset. Please check the column names and update the code accordingly.")

# Count cars by number of cylinders
cylinder_counts = df['num-of-cylinders'].value_counts()
print("Number of car types with different number of cylinders:\n", cylinder_counts)

# Visualization
# 1. Company & price
if manufacturer_column in df.columns:
    plt.figure(figsize=(10, 6))
    avg_price_company.plot(kind='bar')
    plt.title('Average Price by Company')
    plt.xlabel('Company')
    plt.ylabel('Average Price')
    plt.show()

# 2. Company & number of cylinders
if manufacturer_column in df.columns:
    plt.figure(figsize=(10, 6))
    df.groupby(manufacturer_column)['num-of-cylinders'].value_counts().unstack().plot(kind='bar', stacked=True)
    plt.title('Number of Cylinders by Company')
    plt.xlabel('Company')
    plt.ylabel('Count')
    plt.show()

# 3. Body type & price
plt.figure(figsize=(10, 6))
avg_price_body_style.plot(kind='bar')
plt.title('Average Price by Body Type')
plt.xlabel('Body Type')
plt.ylabel('Average Price')
plt.show()

# 4. Body type & cylinders
plt.figure(figsize=(10, 6))
df.groupby('body-style')['num-of-cylinders'].value_counts().unstack().plot(kind='bar', stacked=True)
plt.title('Number of Cylinders by Body Type')
plt.xlabel('Body Style')
plt.ylabel('Count')
plt.show()

# 5. Engine type & horsepower
plt.figure(figsize=(10, 6))
df.groupby('engine-type')['horsepower'].mean().sort_values(ascending=False).plot(kind='bar')
plt.title('Average Horsepower by Engine Type')
plt.xlabel('Engine Type')
plt.ylabel('Average Horsepower')
plt.show()